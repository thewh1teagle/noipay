#!/usr/bin/env python3

from typing import Union
import argparse
import time
import sys
import os
import datetime
from loguru import logger
from selenium import webdriver
from selenium.webdriver.firefox.options import Options as firefox_Options
from selenium.webdriver.chrome.options import Options as chrome_Options



def datetime_now() -> str:
    return datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d %H:%M:%S')

def convert_back_to_date_time(strftime):
    return datetime.datetime.strptime(strftime, "%Y-%m-%d %H:%M:%S")
    

def confirm_hosts(user: str, password: str, driver: webdriver) -> None:
    """  
    Here the whole logic is going. selenium open the hosts location and confirms hosts.
    """

    logger.info("Opening login url")
    driver.get('https://www.noip.com/login')
    time.sleep(5)
    # Login
    logger.info("Filling login credintials")
    user_element = driver.find_element_by_xpath('//input[@name="username"]')
    user_element.send_keys(user)
    time.sleep(0.5)
    pass_element = driver.find_element_by_xpath('//input[@name="password"]')
    pass_element.send_keys(password)
    time.sleep(0.5)
    log_in_button = driver.find_element_by_xpath('//button[@name="Login"]')
    logger.info("Clicking login button")
    time.sleep(0.1)
    log_in_button.click()
    time.sleep(5)


    # Navigate to hosts
    try:
        hosts_element = driver.find_element_by_xpath('//span[text() = "Active"]')
    except:
        try:
            hosts_element = driver.find_element_by_xpath("//span[contains(@data-original-title, 'Our Free services requires you to confirm that you are')]")
        except:
            logger.error("Login failed.")
            sys.exit(1)

    logger.info("Opening hosts window")
    hosts_element.click()
    time.sleep(5)

    # Find hosts to be confirmed and confirm
    logger.info("Looking for hosts to be enabled..")
    hosts_names_elements = driver.find_elements_by_xpath(('//a[@class="link-info cursor-pointer"]'))
    hosts_names = [element.text for element in hosts_names_elements]
    confirms_buttons = driver.find_elements_by_xpath("//button[text()='Confirm']")
    
    if not confirms_buttons:
        logger.info(f"hosts {', '.join(hosts_names)} are already confirmed")
    else:
        for c, btn in enumerate(confirms_buttons): # c - counter [ from 0 ]
            try:
                btn.click()
                logger.info(f"host {hosts_names[c]} confirmed")
            except Exception as e:
                logger.error(f"error when trying to confirm host {hosts_names[c]}")
    update_last_confirm()

def get_last_confirm() -> Union[datetime.datetime, None]:
    """
    Get the last date when the hosts confirmed using this script.
    """
    home = os.path.expanduser("~")

    try:
        with open(home + '/.config/noipay/last_noipay_running.date', 'r') as fp:
            return convert_back_to_date_time(fp.read()) 
    except:
        return None

def update_last_confirm() -> None:
    """ Update the last date when the hosts confirmed using this script. """
    home = os.path.expanduser("~")
    if not os.path.exists(home + '/.config/noipay'):
        os.makedirs(home + '/.config/noipay')
    with open(home + '/.config/noipay/last_noipay_running.date', 'w') as fp:
        fp.write(datetime_now())


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Renew No-IP hosts")
    required_args = parser.add_argument_group('required arguments')
    required_args.add_argument(
        '-u', '--user', 
        required = '-l' not in sys.argv, 
        help = "Noip2 user name"
    )
    required_args.add_argument(
        '-p', '--password', 
        required = '-l' not in sys.argv, 
        help = "Noip2 password"
    )
    parser.add_argument(
        '-d', '--driver',
        required = False,
        help = "Choose which browser to use as selenium driver (default: %(default)s)",
        default = "chrome",
        choices = ['chrome', 'firefox'] 
    )
    
    parser.add_argument(
        '--headless', 
        required = False,
        action = 'store_true',
        help = "Start browser in headless mode",
        default = False
    )
    parser.add_argument(
        '-l', '--last_confirm',
        required = False,
        action = 'store_true', 
        help = "Display last hosts confirm date of noipay", 
        default = False
    )

    args = parser.parse_args()

    if args.last_confirm:
        logger.info(f'Last confirm: {get_last_confirm()}')
        if not args.user:
            sys.exit(0)

    if args.headless:
        logger.info("Starting in headless mode")

    if args.driver == 'firefox':
        options = firefox_Options()
        options.headless = args.headless
        driver = webdriver.Firefox(options=options)
    else:
        options = chrome_Options()
        options.headless = args.headless
        driver = webdriver.Chrome(options=options)

    confirm_hosts(args.user, args.password, driver)
    
